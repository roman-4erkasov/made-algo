"""
B. –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç1 —Å–µ–∫—É–Ω–¥–∞
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç512 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–î–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –í—Å–µ —á–∏—Å–ª–∞ –æ—Ç ‚àí109 –¥–æ 109.

–ù—É–∂–Ω–æ —É–º–µ—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≤–∏–¥–∞ ¬´C–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç ùëô –¥–æ ùëü¬ª?

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ß–∏—Å–ª–æ ùëõ (1‚â§ùëõ‚â§105). –î–∞–ª–µ–µ ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

–ó–∞—Ç–µ–º —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ùëò (1‚â§ùëò‚â§105).

–î–∞–ª–µ–µ ùëò –ø–∞—Ä —á–∏—Å–µ–ª ùëô,ùëü (‚àí109‚â§ùëô‚â§ùëü‚â§109) ‚Äî —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–ø—Ä–æ—Å—ã.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ ùëò —á–∏—Å–µ–ª ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
5
10 1 10 3 4
4
1 10
2 9
3 4
2 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
5 2 2 0 

"""

from queue import Queue
import sys
 
MIN_VALUE = -10_000_000_000
MAX_VALUE = 10_000_000_000
 
 
def lower_bound(array, query):
    beg = -1
    end = len(array)
    while beg < end - 1:
        mid = (beg + end) // 2
        if query <= array[mid]:
            end = mid
        else:
            beg = mid
    return end
 
def upper_bound(array, query):
    return lower_bound(array, query + 1)
 
def count_elements_in_range(array, min_value, max_value):
    if min_value <= MIN_VALUE and max_value >= MAX_VALUE:
        return len(array)
 
    if min_value <= MIN_VALUE:
        left = 0
    else:
        left = lower_bound(array, min_value)
 
    if max_value >= MAX_VALUE:
        right = len(array)
    else:
        right = upper_bound(array, max_value)
    
    return max(0, right - left)
 
 
def naive_solution(array, min_value, max_value):
 
    def lower_bound(array, query):
        beg = 0
        end = len(array)
        while beg < end:
            mid = beg + (end - beg) // 2
            if array[mid] < query:
                beg = mid + 1
            else:
                end = mid
        return beg
 
    def upper_bound(array, query):
        beg = 0
        end = len(array)
        while beg < end:
            mid = beg + (end - beg) // 2
            if query < array[mid]:
                end = mid
            else:
                beg = mid + 1
        return beg
 
    if min_value <= MIN_VALUE and max_value >= MAX_VALUE:
        return len(array)
 
    if min_value <= MIN_VALUE:
        lb = 0
    else:
        lb = lower_bound(array, min_value)
 
    if max_value >= MAX_VALUE:
        ub = len(array)
    else:
        ub = upper_bound(array, max_value)
 
    result = max(0, ub - lb)
    return result
 
 
def cli_dialog():
    _ = int(sys.stdin.readline())
    arr = [int(x) for x in sys.stdin.readline().split()]
    k = int(sys.stdin.readline())
    queries = []
    for _ in range(k):
        l, r = [int(x) for x in sys.stdin.readline().split()]
        queries.append((l, r))
    arr.sort()
    results = []
    for l, r in queries:
        result = count_elements_in_range(
            array=arr,
            min_value=l,
            max_value=r
        )
        results.append(str(result))
    sys.stdout.write(" ".join(results) + "\n")
 
 
if __name__ == "__main__":
    cli_dialog()