"""
C. –û—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç4 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–î–∞–Ω—ã —Ç–æ—á–∫–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏, —è–≤–ª—è—é—â–∏–µ—Å—è –≤–µ—Ä—à–∏–Ω–∞–º–∏ –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞. –í–µ—Å —Ä–µ–±—Ä–∞ —Ä–∞–≤–µ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–∞–º —ç—Ç–æ–≥–æ —Ä–µ–±—Ä–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –≥—Ä–∞—Ñ–µ –Ω–∞–π—Ç–∏ –æ—Å—Ç–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞ (1‚â§ùëõ‚â§10000). –ö–∞–∂–¥–∞—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùë•ùëñ, ùë¶ùëñ  ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ùëñ-–π –≤–µ—Ä—à–∏–Ω—ã (‚àí10000‚â§ùë•ùëñ,ùë¶ùëñ‚â§10000). –ù–∏–∫–∞–∫–∏–µ –¥–≤–µ —Ç–æ—á–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –≤–µ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2
0 0
1 1
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
1.4142135624

"""

from math import sqrt
 
 
def dist(left, right):
    return sqrt(
        (right[0] - left[0]) ** 2 + (right[1] - left[1]) ** 2
    )
 
 
def prims_alg(nodes: list):
    INF = (10_000 - (-10_000)) ** 2 + (10_000 - (-10_000)) ** 2
    INVALID_RESULT = -1
    EMPTY_EDGE_END = -1
 
    n_nodes = len(nodes)
    result = 0
    used = [False for _ in range(n_nodes)]
    min_e = [INF for _ in range(n_nodes)]
    sel_e = [-1 for _ in range(n_nodes)]
    min_e[0] = 0
    for i in range(n_nodes):
        v = EMPTY_EDGE_END
        for j in range(n_nodes):
            if (not used[j]) and (v == EMPTY_EDGE_END or min_e[j] < min_e[v]):
                v = j
        if min_e[v] == INF:
            return INVALID_RESULT
        used[v] = True
        if sel_e[v] != EMPTY_EDGE_END:
            result += dist(nodes[v], nodes[sel_e[v]])
 
        for to in range(n_nodes):
            if v != to:
                d = dist(nodes[v], nodes[to])
                if d < min_e[to]:
                    min_e[to] = d
                    sel_e[to] = v
                    sel_e[v] = to
    return result
 
 
if __name__ == '__main__':
    n_nodes = int(input())
    nodes = []
    for _ in range(n_nodes):
        point = tuple([int(x) for x in input().split()])
        nodes.append(point)
    print(prims_alg(nodes))