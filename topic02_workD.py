"""
D. –ì—Ä–∏—à–∞ –ø–æ—Å–ª–µ –¥–∏—Å–∫–æ—Ç–µ–∫–∏
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç512 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –¥–∏—Å–∫–æ—Ç–µ–∫–∏ –ì—Ä–∏—à–∞ —Ä–µ—à–∏–ª —É—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç—è–º ¬´–≤–∑—Ä—ã–≤ –º–æ–∑–≥–∞¬ª. –û–Ω –≤–∑—è–ª –º–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –æ–¥–Ω—É –ª–∞—Ç–∏–Ω—Å–∫—É—é –±—É–∫–≤—É –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ. –ê –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–¥—É–º–∞–ª —Å–≤–æ—é —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–¥–∞–ª –¥–µ—Ç—è–º –∑–∞–¥–∞–Ω–∏–µ: —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Å—Ç—Ä–æ–∫ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç–æ—á–∫–∏. –ì—Ä–∏—à–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ. –í–∞–º –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –µ—ë –ø–æ–¥—Å—Ç—Ä–æ–∫ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.

–ó–∞–ø–∏—à–µ–º –±—É–∫–≤—ã, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –ø–æ–¥—Ä—è–¥ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º. –¢–æ–≥–¥–∞ –µ—Å–ª–∏ –ì—Ä–∏—à–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ ¬´aaab¬ª, –∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚Äî —ç—Ç–æ ¬´aba¬ª, —Ç–æ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´a¬ª, –ø–æ–¥—Å—Ç—Ä–æ–∫—É ¬´b¬ª, –¥–≤–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´aa¬ª –∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´ab¬ª –∏ ¬´aab¬ª. –ê –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´aaa¬ª –∏ ¬´aaab¬ª –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –≤—Å–µ–≥–æ –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –±—É–∫–≤–æ–π ¬´a¬ª.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö (1‚â§ùëõ,ùëö‚â§105) ‚Äî –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –ì—Ä–∏—à–∏ –∏ –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.

–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –ì—Ä–∏—à–∏–Ω—É —Å—Ç—Ä–æ–∫—É ùë† –¥–ª–∏–Ω—ã ùëõ, —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ ùë° –¥–ª–∏–Ω—ã ùëö, —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ ùë†, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏ ùë°.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4 3
aaab
aba
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
8
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
7 3
abacaba
abc
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
15

"""

from collections import deque
 
CHAR_BIAS = 97  # order of character 'a'
N_DIGITS = 26  # number of digits is length of english alphabet
 
 
def char2num(value):
    return ord(value) - CHAR_BIAS
 
 
def num2char(value):
    return chr(value + CHAR_BIAS)
 
 
def count_subwords(main_string, card_string, n_main):
    if main_string == card_string:
        return n_main * (n_main + 1) // 2
 
    result = 0
 
    main_arr = [char2num(c) for c in main_string]
    main_counter = [0 for _ in range(N_DIGITS + 1)]
    for num in main_arr:
        main_counter[num] += 1
 
    card_arr = [char2num(c) for c in card_string]
    card_counter = [0 for _ in range(N_DIGITS + 1)]
    for num in card_arr:
        card_counter[num] += 1
 
    # if counters are equal then computation is simple
    counters_eq = True
    for i in range(N_DIGITS):
        if card_counter[i] != main_counter[i]:
            counters_eq = False
            break
    if counters_eq:
        return n_main * (n_main + 1) // 2
 
    index_start = 0
    index_finish = 0
    buff = deque([main_arr[0]])
    counts = card_counter.copy()
    while index_start < n_main:
        num = buff[-1]
        if counts[num] > 0:
            counts[num] = counts[num] - 1
            result += index_finish - index_start + 1
            if index_finish < n_main - 1:
                index_finish += 1
                buff.append(main_arr[index_finish])
            else:
                break
        else:
            num = buff.popleft()
            if counts[num] < card_counter[num]:
                counts[num] = counts[num] + 1
            if index_start < n_main - 1:
                index_start += 1
                if index_finish < index_start:
                    index_finish = index_start
                    buff.append(main_arr[index_finish])
            else:
                break
    return result
 
 
if __name__ == "__main__":
    main_len, n_cards = [int(x) for x in input().split()]
    main_str = input()
    card_str = input()
    print(count_subwords(main_str, card_str, main_len))