"""
D. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç 5 —Å–µ–∫—É–Ω–¥
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ ùê¥=‚ü®ùëé1,ùëé2,‚Ä¶,ùëéùëõ‚ü© –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (ùëñ,ùëó) —Ç–∞–∫–∏—Ö, —á—Ç–æ ùëñ<ùëó –∏ ùëéùëñ>ùëéùëó.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëõ (1‚â§ùëõ‚â§500000) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ùëõ –ø–æ–ø–∞—Ä–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ ùê¥ (0‚â§ùëéùëñ‚â§106).

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4
1 2 4 5
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
0
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4
5 4 2 1
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
6

"""


def merge(vec, head, mid, tail):
    len_left = mid - head + 1
    len_right = tail - mid
    result = 0
 
    arr_left = vec[head:head + len_left]
    arr_right = vec[mid + 1:mid + 1 + len_right]
 
    idx_left = 0
    idx_right = 0
    idx_target = head
    while idx_left < len_left and idx_right < len_right:
        if arr_left[idx_left] > arr_right[idx_right]:
            vec[idx_target] = arr_right[idx_right]
            idx_right += 1
            result += len_left - idx_left
        else:
            vec[idx_target] = arr_left[idx_left]
            idx_left += 1
        idx_target += 1
    while idx_left < len_left:
        vec[idx_target] = arr_left[idx_left]
        idx_left += 1
        idx_target += 1
    while idx_right < len_right:
        vec[idx_target] = arr_right[idx_right]
        idx_right += 1
        idx_target += 1
    return result
 
 
def merge_sort(vec):
    n = len(vec)
    result = 0
    step = 1
    while step < n:
        head = 0
        while head < n - 1:
            mid = head + step - 1
            tail = min(head + 2 * step - 1, n - 1)
            if mid < tail:
                result += merge(vec, head, mid, tail)
            head += 2 * step
        step *= 2
    return result
 
 
if __name__ == '__main__':
    n = int(input())
    vec = [int(x) for x in input().split()]
    print(merge_sort(vec))