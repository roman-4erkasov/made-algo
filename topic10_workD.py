"""
D. –ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–µ–π –≥—Ä–∞—Ñ–∞ ùê∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ ùêª, –≥–¥–µ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏–ª—å–Ω–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ ùê∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—à–∏–Ω–∞ –∏–∑ –≥—Ä–∞—Ñ–∞ ùêª. –†–µ–±—Ä–æ ùë£ùë¢ –≤ –≥—Ä–∞—Ñ–µ ùêª –µ—Å—Ç—å —Ç–æ–≥–¥–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –≥—Ä–∞—Ñ–µ ùê∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ–±—Ä–æ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π ùë£ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏–ª—å–Ω–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏, –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é ùë¢.

–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –≤ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∞—Ç–Ω—ã—Ö —Ä–µ–±–µ—Ä.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (ùëõ‚â§10000, ùëö‚â§100000). –°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ. –†–µ–±—Ä–æ –Ω–æ–º–µ—Ä ùëñ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ ùëèùëñ, ùëíùëñ ‚Äî –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º —Ä–µ–±—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 ‚â§ ùëèùëñ, ùëíùëñ ‚â§ ùëõ). –í –≥—Ä–∞—Ñ–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–Ω—ã–µ —Ä–µ–±—Ä–∞ –∏ –ø–µ—Ç–ª–∏.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –≤ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4 4
2 1
3 2
2 3
4 3
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2

"""

from sys import setrecursionlimit
import threading
from collections import defaultdict, deque
 
 
def topological_sort(graph: defaultdict, n_nodes: int):
    """
    Topological sorting algorithm
    :param graph: graph as dict with lists of children nodes
    :param n_nodes: number of nodes in graph
    :return: nodes ordered in topological order
    """
    seen = set()
    result = deque()
 
    WHITE = 0
    GRAY = 1
    BLACK = 2
    colors = [WHITE for _ in range(n_nodes)]
 
    def dfs(node_src: int, passed):
        seen.add(node_src)
        colors[node_src - 1] = GRAY
        for node_trg in graph[node_src]:
            if colors[node_trg - 1] == WHITE:
                dfs(node_trg, passed)
        colors[node_src - 1] = BLACK
        result.appendleft(node_src)
 
    for node in range(1, n_nodes + 1):
        if node not in seen:
            passed_in_traverse = set()
            dfs(node, passed_in_traverse)
    return result
 
 
def find_cc(graph: defaultdict, nodes):
    NO_COLOR = 0
    n_nodes = len(nodes)
    colors = [NO_COLOR for _ in range(n_nodes)]
 
    def dfs(node_src: int, curr: int):
        colors[node_src - 1] = curr
        for node_trg in graph[node_src]:
            if colors[node_trg - 1] == NO_COLOR:
                dfs(node_trg, curr)
 
    count = 0
    for node in nodes:
        if colors[node - 1] == NO_COLOR:
            count += 1
            dfs(node, count)
    return colors
 
 
def count_edges(graph: defaultdict, rgraph: defaultdict, n_nodes: int, edges: set):
    nodes = topological_sort(graph, n_nodes)
    colors = find_cc(rgraph, nodes)
    condensated_edges = set()
    for node1, node2 in edges:
        if colors[node1 - 1] != colors[node2 - 1]:
            condensated_edges.add(
                (colors[node1 - 1], colors[node2 - 1])
            )
    return len(condensated_edges)
 
 
def main():
    graph = defaultdict(list)
    rgraph = defaultdict(list)
    edges = set()
    n_nodes, n_edges = [int(x) for x in input().split()]
    for _ in range(n_edges):
        node1, node2 = [int(x) for x in input().split()]
        graph[node1].append(node2)
        rgraph[node2].append(node1)
        edges.add((node1, node2))
    print(count_edges(graph=graph, rgraph=rgraph, n_nodes=n_nodes, edges=edges))
 
 
setrecursionlimit(10 ** 9)
threading.stack_size(2 ** 26)
thread = threading.Thread(target=main)
thread.start()