/**
ùëò -—è –∏–º–ø–µ—Ä—Å–∫–∞—è –ø–æ—Ä—è–¥–∫–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç1.2 —Å–µ–∫—É–Ω–¥
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–ë–∞—Ç–∞–ª—å–æ–Ω –∫–ª–æ–Ω–æ–≤ –≤—ã—à–µ–ª –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ. –í—Å–µ –∏–º–ø–µ—Ä—Ü—ã —Å—Ç–∞–ª–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∏—Å—å: –ø–µ—Ä–≤—ã–π, –≤—Ç–æ—Ä–æ–π, —Ç—Ä–µ—Ç–∏–π, ‚Ä¶, ùëõ-–π. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –¥–µ—Ä–∂–∏—Ç –≤ —Ä—É–∫–∞—Ö –±—É–º–∞–∂–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IQ. –ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IQ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 109.

–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∫ –±–∞—Ç–∞–ª—å–æ–Ω—É –ø–æ–¥—Ö–æ–¥–∏—Ç –≥—Ä–∞—Ñ –î—É–∫–æ, —Ä–∞–∑–º–∞—Ö–∏–≤–∞–µ—Ç –º–µ—á–æ–º –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å: ¬´–ï—Å–ª–∏ –≤—Å–µ—Ö –∫–ª–æ–Ω–æ–≤ —Å ùëñ-–≥–æ –ø–æ ùëó-–≥–æ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç–∞, —Ç–æ –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —É –∫–ª–æ–Ω–∞, —Å—Ç–æ—è—â–µ–º –Ω–∞ ùëò-–º –º–µ—Å—Ç–µ?¬ª ‚Äî –∏ –±—ã—Å—Ç—Ä–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç, –≥—Ä–æ–∑—è –≤—Å—é –ø–∞—Ä—Ç–∏—é –ø—É—Å—Ç–∏—Ç—å –≤ —Ä–∞—Å—Ö–æ–¥. –ë–æ–ª—å—à–∞—è –ø—Ä–æ—Å—å–±–∞ ‚Äî —Ä–µ—à–∏—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á—É –∏ –ø–æ–º–æ–≥–∏—Ç–µ –∫–ª–æ–Ω–∞–º –≤—ã–∂–∏—Ç—å.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–æ–≤ (1‚â§ùëõ‚â§1000).

–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —ç—Ç–∏ ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏. –ß–∏—Å–ª–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 109.

–í —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —á–∏—Å–ª–æ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (1‚â§ùëö‚â§105).

–ü–æ—Å–ª–µ–¥–Ω–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´ùëñ ùëó ùëò¬ª. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Ç–æ –µ—Å—Ç—å 1‚â§ùëñ‚â§ùëó‚â§ùëõ –∏ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ –æ—Ç ùëñ-–≥–æ –¥–æ ùëó-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã ùëò —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ù–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
5
1 3 2 4 5
3
1 3 2
1 5 1
1 5 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2
1
2

**/

#include <algorithm>
#include <deque>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
 
long partition(std::vector<long> &vec, long head, long tail) {
  long idx_border = head - 1;
  long pivot = vec[tail];
  long idx_check = head;
  for (; idx_check <= tail - 1; idx_check++) {
    if (vec[idx_check] <= pivot) {
      std::swap(vec[idx_check], vec[++idx_border]);
    }
  }
  std::swap(vec[idx_check], vec[++idx_border]);
  return idx_border;
}
 
long kth_elem(std::vector<long> vec, long k) {
  long result = -1;
  std::pair<long, long> pair;
  std::deque<std::pair<long, long>> buff = std::deque<std::pair<long, long>>();
  buff.push_back(std::make_pair(0, vec.size() - 1));
  while (not buff.empty()) {
    pair = buff.front();
    buff.pop_front();
    long pivot = partition(vec, pair.first, pair.second);
    if (pivot == k) {
      result = vec[pivot];
      break;
    } else if (pivot > k)
      buff.push_back(std::make_pair(pair.first, pivot - 1));
    else
      buff.push_back(std::make_pair(pivot + 1, pair.second));
  }
  return result;
}
 
int main() {
  long n, n_qry, start, k, finish;
  std::string buff;
  std::vector<long> vec;
 
  std::cin >> n;
  std::cin.ignore();
 
  getline(std::cin, buff);
  std::istringstream sstream(buff);
  long elm;
  while (sstream >> elm) vec.push_back(elm);
  std::cin >> n_qry;
 
  for (size_t i = 0; i < n_qry; i++) {
    std::cin >> start >> finish >> k;
    start--;
    finish--;
    k--;
    std::vector<long> sub(vec.begin() + start, vec.begin() + finish + 1);
    long res = kth_elem(sub, k);
    std::cout << res << "\n";
  }
}