"""
C. –¶–∏—Ñ—Ä–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç3 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–î–∞–Ω–æ ùëõ —Å—Ç—Ä–æ–∫, –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ ùëò —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.

–í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, ùëö ‚Äî –∏—Ö –¥–ª–∏–Ω–∞ –∏ ùëò ‚Äì —á–∏—Å–ª–æ —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (1‚â§ùëõ‚â§1000, 1‚â§ùëò‚â§ùëö‚â§1000). –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Å–ª–µ ùëò —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
3 3 1
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
aba
baa
bbb
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
3 3 2
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
baa
aba
bbb
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
3 3 3
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
aba
baa
bbb

"""

CHAR_BIAS = 97  # order of character 'a'
N_DIGITS = 26  # number of digits is length of english alphabet
 
 
def char2num(value):
    return ord(value) - CHAR_BIAS
 
 
def num2char(value):
    return chr(value + CHAR_BIAS)
 
 
def countsort(arr, radix, word_length, verbose=False):
    counter = [[] for _ in range(N_DIGITS)]
    for word in arr:
        key = word[word_length - radix - 1]
        if verbose:
            print(f"countsort: k={key} w={word}")
        counter[key].append(word)
 
    index_trg = 0
    for digit in range(N_DIGITS):
        for word in counter[digit]:
            arr[index_trg] = word
            index_trg += 1
    if verbose:
        print(f"countsort: arr={arr}")
        print(f"countsort: counter={counter}")
 
 
if __name__ == "__main__":
    n_words, word_len, n_phases = [int(v) for v in input().split()]
    arr = []
    for _ in range(n_words):
        arr.append([char2num(c) for c in input()])
    for radix in range(n_phases):
        countsort(arr, radix=radix, word_length=word_len)
    for word in arr:
        print("".join(num2char(x) for x in word))