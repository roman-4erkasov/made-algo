"""
A. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
–î–∞–Ω –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–º.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1‚â§ùëõ‚â§100000, 0‚â§ùëö‚â§200000).

–°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ. –†–µ–±—Ä–æ –Ω–æ–º–µ—Ä ùëñ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ ùëèùëñ, ùëíùëñ ‚Äî –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ü–æ–≤ —Ä–µ–±—Ä–∞ (1‚â§ùëèùëñ,ùëíùëñ‚â§ùëõ). –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø–µ—Ç–ª–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëò ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞. –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ ùëõ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª ùëé1,ùëé1,‚Ä¶,ùëéùëõ, –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏—Ö ùëò, –≥–¥–µ ùëéùëñ ‚Äî –Ω–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ùëñ-—è –≤–µ—Ä—à–∏–Ω–∞.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
3 1
1 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2
1 1 2
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
4 2
1 3
2 4
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
2
1 2 1 2

"""

from sys import setrecursionlimit
import threading
 
 
def count_connected_components(graph: list):
    NO_COLOR = 0
 
    def dfs_rec(node, color_curr):
        colors[node] = color_curr
        for node_trg in graph[node]:
            if colors[node_trg] == NO_COLOR:
                dfs_rec(node_trg, color_curr)
 
    n_nodes = len(graph)
    count = 0
    colors = [NO_COLOR for _ in range(n_nodes)]
    for node in range(n_nodes):
        if colors[node] == NO_COLOR:
            count += 1
            dfs_rec(node, count)
    return count, colors
 
 
def main():
    n_nodes, n_edges = [int(x) for x in input().split()]
 
    graph = [set() for _ in range(n_nodes)]
 
    for _ in range(n_edges):
        v_src, v_trg = [int(x) for x in input().split()]
        graph[v_src - 1].add(v_trg - 1)
        graph[v_trg - 1].add(v_src - 1)
 
    n_colors, colors = count_connected_components(graph)
    print(n_colors)
    print(" ".join([str(x) for x in colors]))
 
 
setrecursionlimit(10 ** 9)
threading.stack_size(2 ** 26)
thread = threading.Thread(target=main)
thread.start()